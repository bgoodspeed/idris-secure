{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
# Installation stuff\
# Coq - need <= 8.3 for Ynot (separation logic/monads)\
https://coq.inria.fr/download\
# Ynot\
http://ynot.cs.harvard.edu/\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 # Manual\
https://coq.inria.fr/distrib/current/refman/toc.html\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
# Source code #########################################\
\
Fixpoint split_string_r (delimiter : ascii) ( str current_word : string) (accumulated_words : list string) \
	\{struct str\} : list string :=\
	match str with\
	| EmptyString => current_word :: accumulated_words\
	| String a b  => if prefix (String delimiter EmptyString) str then\
				split_string_r delimiter b EmptyString (current_word :: accumulated_words)  \
			 else\
				split_string_r delimiter b (append current_word (substring 0 1 str)) accumulated_words\
	end.\
\
Definition split_string (delimiter : ascii) ( str current_word : string) (accumulated_words : list string) : list string :=\
	rev (split_string_r delimiter str current_word accumulated_words).\
\
\
Definition split_string_simplified (delimiter : ascii) (str : string) : list string := split_string delimiter str "" nil.\
\
# Proofs ############################################\
\
\
Lemma anyDelimiterOnBlankGivesEmptyStringArrayNonRev :\
	forall a : ascii,\
	split_string a "" "" nil = [ "" ].\
Proof.\
	intros.\
	simpl.\
	unfold split_string.\
	split.\
Qed.\
\
\
Lemma anyDelimiterOnBlankGivesEmptyStringArray :\
	forall a : ascii,\
	split_string_r a "" "" nil = [ "" ].\
Proof. reflexivity. Qed. \
 \
Theorem anyDelimiterOnBlankGivesArraySizedAtLeastOne :\
	forall a : ascii,\
	List.length (split_string_r a "" "" nil) >= 1.\
Proof.\
	intros a.\
	rewrite anyDelimiterOnBlankGivesEmptyStringArray.\
	simpl.\
	auto.\
Qed.\
\
\
Lemma anyDelimitedOnAnyStringGivesAtLeastOne : \
forall a : ascii, \
forall s : string, List.length (split_string_simplified a s) >= 1.\
Proof.\
intros a s.\
induction s.\
left ; reflexivity.\
unfold split_string_simplified.\
unfold split_string.\
auto.\
admit. \
Qed.\
\
\
# Runtime notes ##########################################\
# Build coq program, extract ML, compile and run native bin\
make clean && make && make build && ./main.native\
\
# Interactive REPL\
coqtop -l CoqSourceFile.v\
\
\
\
}